[tool.uv.workspace]
members = [
    "packages/betedge-data",
    "packages/betedge-processing"
]

[tool.uv.sources]
betedge-data = { workspace = true }
betedge-processing = { workspace = true }

[tool.ruff]
line-length = 88

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
skip-magic-trailing-comma = false
indent-style = "space"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
]

ignore = [
    "E501",  # Line too long (handled by formatter)
    "E203",  # Whitespace before ':' (conflicts with Black)
    "E402"
]

[dependency-groups]
dev = [
    "ipykernel>=6.30.1",
    "polars>=1.31.0",
    "pytest>=8.4.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "requests>=2.32.4",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --tb=short --strict-markers"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::RuntimeWarning",
    "ignore::UserWarning"
]
markers = [
    "unit: mark test as unit test (no external dependencies)",
    "integration: mark test as integration test (requires services like MinIO)",
    "e2e: mark test as end-to-end test",
    "slow: mark test as slow running",
]

[tool.coverage.run]
source = ["betedge_data"]
omit = [
    "*/tests/*",
    "*/bench/*",
    "*/__init__.py",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):"
]
show_missing = true
precision = 2
